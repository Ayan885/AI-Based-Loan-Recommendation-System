# -*- coding: utf-8 -*-
"""Webathon Loan AI.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NBNCLHZ2JVIz9XkGRRtLhTWKVhvCvJnk
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score
import pickle

loanData = pd.read_csv("train_u6lujuX_CVtuZ9i.csv")
loanData.head()

loanData.isna().sum()

loanData[loanData['Dependents'].isna()]

loanData.describe()

loanData.isna().sum().sort_values(ascending=False)

print(f"Unique vaiables: {loanData['Credit_History'].unique()} \n\ndtype of Credit_History: {loanData['Credit_History'].dtype}")

# Convert the Credit_History column to the object datatype
loanData['Credit_History'] = loanData['Credit_History'].astype('object')
loanData['Credit_History'].dtype

# List of columns with missing values
null_cols = ['Credit_History', 'Self_Employed', 'LoanAmount', 'Dependents', 'Loan_Amount_Term', 'Gender', 'Married']
# Imputation loop
for col in null_cols:
    if loanData[col].dtype == 'object':
        # Impute categorical variables with mode
        mode_value = loanData[col].mode()[0]
        loanData[col].fillna(mode_value, inplace=True)
        print(f"Imputed {col} with mode: {mode_value}")
    else:
        # Impute numerical variables with mean for non-binary, and mode for binary
        mean_value = loanData[col].mean()
        loanData[col].fillna(mean_value, inplace=True)
        print(f"Imputed {col} with mean: {mean_value}")

loanData.isna().sum().sort_values(ascending=False)

loanData.head()

# Visualize the distribution of the target variable
plt.figure(figsize=(6, 4))
sns.countplot(x='Loan_Status', data=loanData)
plt.title('Loan Approval Status Distribution')
plt.show()

numerical = loanData.select_dtypes('number').columns.to_list()
categorical = loanData.select_dtypes('object').columns.to_list()

loan_num = loanData[numerical]
loan_cat = loanData[categorical]



for i in loan_num:
    plt.figure(figsize=(8, 5))
    sns.histplot(loanData[i], bins=20, kde=True)
    plt.title(f'{i} Distribution')
    plt.show()

    plt.figure(figsize=(8, 5))
    sns.boxplot(x='Loan_Status', y=i, data=loanData, palette='Set3')
    plt.title(f'{i} Distribution by Loan Status')
    plt.show()

loanData.replace({'Married':{'No':0,'Yes':1},'Gender':{'Male':1,'Female':0},'Self_Employed':{'Yes':1,'No':0},'Property_Area':{'Rural':0,'Urban':1,'Semiurban':2},'Education':{'Graduate':1,'Not Graduate':0}},inplace=True)

loanData.head()

"""## Training"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

f=loanData.groupby("Gender").mean().plot(kind="bar",subplots=True,sharex=False,sharey=False,figsize=(15,10),layout=(2,5),alpha=0.7,title="According to Gender")
f= sns.set_style("darkgrid")
f=sns.set_context("paper")
plt.show()

loanData['Dependents'].value_counts()

loanData=loanData.replace(to_replace='3+',value=4)
loanData['Dependents'].value_counts()

#Splitting the data and label
X=loanData.drop(columns=['Loan_ID','Loan_Status'],axis=1)
Y=loanData['Loan_Status']

print(X)
print(Y)

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.1,random_state=2,stratify=Y)

print(X.shape,X_test.shape,Y.shape,X_test.shape)

classifier = svm.SVC(kernel='linear')

classifier.fit(X_train,Y_train)

"""## Model Evaluation"""

X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score (X_train_prediction,Y_train)

print('Accuracy score on training data : ',training_data_accuracy)

# accuracy score on test data
X_test_prediction = classifier.predict(X_test)
test_data_accuracy = accuracy_score (X_test_prediction,Y_test)

print('Accuracy score on test data:',test_data_accuracy)


pickle.dump(classifier.open('model.pkl','wb'))
model = pickle.load(open('model.pkl'),'rb')